<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:sc="http://www.springframework.org/schema/security" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<sc:http pattern="/oauth/cache_approvals" security="none" />
	<sc:http pattern="/oauth/uncache_approvals" security="none" />

	<sc:http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager">
		<sc:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<sc:anonymous enabled="false" />
		<sc:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request parameters -->
		<sc:custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
		<sc:access-denied-handler ref="oauthAccessDeniedHandler" />
	</sc:http>

	<bean id="clientAuthenticationEntryPoint" 
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="yama/client" />
		<property name="typeName" value="Basic" />
	</bean>

	<bean id="oauthAccessDeniedHandler" 
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="clientCredentialsTokenEndpointFilter" 
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

	<sc:authentication-manager id="clientAuthenticationManager">
		<sc:authentication-provider user-service-ref="clientDetailsUserDetailsService" />
	</sc:authentication-manager>
	
	<!-- authorization-server aka AuthorizationServerTokenServices is an interface 
		that defines everything necessary for token management -->
	<oauth2:authorization-server client-details-service-ref="clientDetailsService" 
		token-services-ref="tokenServices" user-approval-handler-ref="userApprovalHandler" 
		user-approval-page="redirect:/oauth/approval" error-page="redirect:/oauth/error">
		<oauth2:authorization-code />
		<oauth2:refresh-token/>
		<oauth2:password />	
	</oauth2:authorization-server>
</beans>