#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
${symbol_pound}${symbol_pound}${symbol_pound} Struts default properties
${symbol_pound}${symbol_pound}${symbol_pound}(can be overridden by a struts.properties file in the root of the classpath)
${symbol_pound}${symbol_pound}${symbol_pound}

${symbol_pound}${symbol_pound}${symbol_pound} Specifies the Configuration used to configure Struts
${symbol_pound}${symbol_pound}${symbol_pound} one could extend org.apache.struts2.config.Configuration
${symbol_pound}${symbol_pound}${symbol_pound} to build one's customize way of getting the configurations parameters into Struts
${symbol_pound} struts.configuration=org.apache.struts2.config.DefaultConfiguration

${symbol_pound}${symbol_pound}${symbol_pound} This can be used to set your default locale and encoding scheme
${symbol_pound} struts.locale=en_US
struts.i18n.encoding=UTF-8

${symbol_pound}${symbol_pound}${symbol_pound} if specified, the default object factory can be overridden here
${symbol_pound}${symbol_pound}${symbol_pound} Note: short-hand notation is supported in some cases, such as "spring"
${symbol_pound}${symbol_pound}${symbol_pound}       Alternatively, you can provide a com.opensymphony.xwork2.ObjectFactory subclass name here
${symbol_pound} struts.objectFactory = spring

${symbol_pound}${symbol_pound}${symbol_pound} specifies the autoWiring logic when using the SpringObjectFactory.
${symbol_pound}${symbol_pound}${symbol_pound} valid values are: name, type, auto, and constructor (name is the default)
struts.objectFactory.spring.autoWire = name

${symbol_pound}${symbol_pound}${symbol_pound} indicates to the struts-spring integration if Class instances should be cached
${symbol_pound}${symbol_pound}${symbol_pound} this should, until a future Spring release makes it possible, be left as true
${symbol_pound}${symbol_pound}${symbol_pound} unless you know exactly what you are doing!
${symbol_pound}${symbol_pound}${symbol_pound} valid values are: true, false (true is the default)
struts.objectFactory.spring.useClassCache = true

${symbol_pound}${symbol_pound}${symbol_pound} ensures the autowire strategy is always respected.
${symbol_pound}${symbol_pound}${symbol_pound} valid values are: true, false (false is the default)
struts.objectFactory.spring.autoWire.alwaysRespect = false

${symbol_pound}${symbol_pound}${symbol_pound} if specified, the default object type determiner can be overridden here
${symbol_pound}${symbol_pound}${symbol_pound} Note: short-hand notation is supported in some cases, such as "tiger" or "notiger"
${symbol_pound}${symbol_pound}${symbol_pound}       Alternatively, you can provide a com.opensymphony.xwork2.util.ObjectTypeDeterminer implementation name here
${symbol_pound}${symbol_pound}${symbol_pound} Note: By default, com.opensymphony.xwork2.util.DefaultObjectTypeDeterminer is used which handles type detection
${symbol_pound}${symbol_pound}${symbol_pound}       using generics. com.opensymphony.xwork2.util.GenericsObjectTypeDeterminer was deprecated since XWork 2, it's
${symbol_pound}${symbol_pound}${symbol_pound}       functions are integrated in DefaultObjectTypeDeterminer now.
${symbol_pound}${symbol_pound}${symbol_pound}       To disable tiger support use the "notiger" property value here.
${symbol_pound}struts.objectTypeDeterminer = tiger
${symbol_pound}struts.objectTypeDeterminer = notiger

${symbol_pound}${symbol_pound}${symbol_pound} Parser to handle HTTP POST requests, encoded using the MIME-type multipart/form-data
${symbol_pound} struts.multipart.parser=cos
${symbol_pound} struts.multipart.parser=pell
struts.multipart.parser=jakarta
${symbol_pound} uses javax.servlet.context.tempdir by default
struts.multipart.saveDir=
struts.multipart.maxSize=2097152

${symbol_pound}${symbol_pound}${symbol_pound} Load custom property files (does not override struts.properties!)
${symbol_pound} struts.custom.properties=application,org/apache/struts2/extension/custom

${symbol_pound}${symbol_pound}${symbol_pound} How request URLs are mapped to and from actions
${symbol_pound}struts.mapper.class=org.apache.struts2.dispatcher.mapper.DefaultActionMapper
struts.mapper.class=rest

${symbol_pound}${symbol_pound}${symbol_pound} Used by the DefaultActionMapper
${symbol_pound}${symbol_pound}${symbol_pound} You may provide a comma separated list, e.g. struts.action.extension=action,jnlp,do
${symbol_pound}${symbol_pound}${symbol_pound} The blank extension allows you to match directory listings as well as pure action names
${symbol_pound}${symbol_pound}${symbol_pound} without interfering with static resources, which can be specified as an empty string
${symbol_pound}${symbol_pound}${symbol_pound} prior to a comma e.g. struts.action.extension=, or struts.action.extension=x,y,z,,
struts.action.extension=,html,htm,xhtml,json,xml

${symbol_pound}${symbol_pound}${symbol_pound} Used by FilterDispatcher
${symbol_pound}${symbol_pound}${symbol_pound} If true then Struts serves static content from inside its jar.
${symbol_pound}${symbol_pound}${symbol_pound} If false then the static content must be available at <context_path>/struts
struts.serve.static=true

${symbol_pound}${symbol_pound}${symbol_pound} Used by FilterDispatcher
${symbol_pound}${symbol_pound}${symbol_pound} This is good for development where one wants changes to the static content be
${symbol_pound}${symbol_pound}${symbol_pound} fetch on each request.
${symbol_pound}${symbol_pound}${symbol_pound} NOTE: This will only have effect if struts.serve.static=true
${symbol_pound}${symbol_pound}${symbol_pound} If true -> Struts will write out header for static contents such that they will
${symbol_pound}${symbol_pound}${symbol_pound}             be cached by web browsers (using Date, Cache-Content, Pragma, Expires)
${symbol_pound}${symbol_pound}${symbol_pound}             headers).
${symbol_pound}${symbol_pound}${symbol_pound} If false -> Struts will write out header for static contents such that they are
${symbol_pound}${symbol_pound}${symbol_pound}            NOT to be cached by web browser (using Cache-Content, Pragma, Expires
${symbol_pound}${symbol_pound}${symbol_pound}            headers)
struts.serve.static.browserCache=true

${symbol_pound}${symbol_pound}${symbol_pound} Set this to false if you wish to disable implicit dynamic method invocation
${symbol_pound}${symbol_pound}${symbol_pound} via the URL request. This includes URLs like foo!bar.action, as well as params
${symbol_pound}${symbol_pound}${symbol_pound} like method:bar (but not action:foo).
${symbol_pound}${symbol_pound}${symbol_pound} An alternative to implicit dynamic method invocation is to use wildcard
${symbol_pound}${symbol_pound}${symbol_pound} mappings, such as <action name="*/*" method="{2}" class="actions.{1}">
struts.enable.DynamicMethodInvocation = false

${symbol_pound}${symbol_pound}${symbol_pound} Set this to true if you wish to allow slashes in your action names.  If false,
${symbol_pound}${symbol_pound}${symbol_pound} Actions names cannot have slashes, and will be accessible via any directory
${symbol_pound}${symbol_pound}${symbol_pound} prefix.  This is the traditional behavior expected of WebWork applications.
${symbol_pound}${symbol_pound}${symbol_pound} Setting to true is useful when you want to use wildcards and store values
${symbol_pound}${symbol_pound}${symbol_pound} in the URL, to be extracted by wildcard patterns, such as
${symbol_pound}${symbol_pound}${symbol_pound} <action name="*/*" method="{2}" class="actions.{1}"> to match "/foo/edit" or
${symbol_pound}${symbol_pound}${symbol_pound} "/foo/save".
struts.enable.SlashesInActionNames = true

${symbol_pound}${symbol_pound}${symbol_pound} use alternative syntax that requires %{} in most places
${symbol_pound}${symbol_pound}${symbol_pound} to evaluate expressions for String attributes for tags
struts.tag.altSyntax=true

${symbol_pound}${symbol_pound}${symbol_pound} when set to true, Struts will act much more friendly for developers. This
${symbol_pound}${symbol_pound}${symbol_pound} includes:
${symbol_pound}${symbol_pound}${symbol_pound} - struts.i18n.reload = true
${symbol_pound}${symbol_pound}${symbol_pound} - struts.configuration.xml.reload = true
${symbol_pound}${symbol_pound}${symbol_pound} - raising various debug or ignorable problems to errors
${symbol_pound}${symbol_pound}${symbol_pound}   For example: normally a request to foo.action?someUnknownField=true should
${symbol_pound}${symbol_pound}${symbol_pound}                be ignored (given that any value can come from the web and it
${symbol_pound}${symbol_pound}${symbol_pound}                should not be trusted). However, during development, it may be
${symbol_pound}${symbol_pound}${symbol_pound}                useful to know when these errors are happening and be told of
${symbol_pound}${symbol_pound}${symbol_pound}                them right away.
struts.devMode = false

${symbol_pound}${symbol_pound}${symbol_pound} when set to true, resource bundles will be reloaded on _every_ request.
${symbol_pound}${symbol_pound}${symbol_pound} this is good during development, but should never be used in production
struts.i18n.reload=false

${symbol_pound}${symbol_pound}${symbol_pound} Standard UI theme
${symbol_pound}${symbol_pound}${symbol_pound} Change this to reflect which path should be used for JSP control tag templates by default
struts.ui.theme=xhtml
struts.ui.templateDir=template
${symbol_pound}sets the default template type. Either ftl, vm, or jsp
struts.ui.templateSuffix=ftl

${symbol_pound}${symbol_pound}${symbol_pound} Configuration reloading
${symbol_pound}${symbol_pound}${symbol_pound} This will cause the configuration to reload struts.xml when it is changed
struts.configuration.xml.reload=false

${symbol_pound}${symbol_pound}${symbol_pound} Location of velocity.properties file.  defaults to velocity.properties
struts.velocity.configfile = velocity.properties

${symbol_pound}${symbol_pound}${symbol_pound} Comma separated list of VelocityContext classnames to chain to the StrutsVelocityContext
struts.velocity.contexts =

${symbol_pound}${symbol_pound}${symbol_pound} Location of the velocity toolbox
struts.velocity.toolboxlocation=

${symbol_pound}${symbol_pound}${symbol_pound} used to build URLs, such as the UrlTag
struts.url.http.port = 80
struts.url.https.port = 443
${symbol_pound}${symbol_pound}${symbol_pound} possible values are: none, get or all
struts.url.includeParams = none

${symbol_pound}${symbol_pound}${symbol_pound} Load custom default resource bundles
${symbol_pound} struts.custom.i18n.resources=testmessages,testmessages2
struts.custom.i18n.resources=global

${symbol_pound}${symbol_pound}${symbol_pound} workaround for some app servers that don't handle HttpServletRequest.getParameterMap()
${symbol_pound}${symbol_pound}${symbol_pound} often used for WebLogic, Orion, and OC4J
struts.dispatcher.parametersWorkaround = false

${symbol_pound}${symbol_pound}${symbol_pound} configure the Freemarker Manager class to be used
${symbol_pound}${symbol_pound}${symbol_pound} Allows user to plug-in customised Freemarker Manager if necessary
${symbol_pound}${symbol_pound}${symbol_pound} MUST extends off org.apache.struts2.views.freemarker.FreemarkerManager
${symbol_pound}struts.freemarker.manager.classname=org.apache.struts2.views.freemarker.FreemarkerManager

${symbol_pound}${symbol_pound}${symbol_pound} Enables caching of FreeMarker templates
${symbol_pound}${symbol_pound}${symbol_pound} Has the same effect as copying the templates under WEB_APP/templates
struts.freemarker.templatesCache=false

${symbol_pound}${symbol_pound}${symbol_pound} Enables caching of models on the BeanWrapper
struts.freemarker.beanwrapperCache=false

${symbol_pound}${symbol_pound}${symbol_pound} See the StrutsBeanWrapper javadocs for more information
struts.freemarker.wrapper.altMap=true

${symbol_pound}${symbol_pound}${symbol_pound} maxStrongSize for MruCacheStorage for freemarker
struts.freemarker.mru.max.strong.size=100

${symbol_pound}${symbol_pound}${symbol_pound} configure the XSLTResult class to use stylesheet caching.
${symbol_pound}${symbol_pound}${symbol_pound} Set to true for developers and false for production.
struts.xslt.nocache=false

${symbol_pound}${symbol_pound}${symbol_pound} Whether to always select the namespace to be everything before the last slash or not
struts.mapper.alwaysSelectFullNamespace=false

${symbol_pound}${symbol_pound}${symbol_pound} Whether to allow static method access in OGNL expressions or not
struts.ognl.allowStaticMethodAccess=false

${symbol_pound}${symbol_pound}${symbol_pound} Whether to throw a RuntimeException when a property is not found
${symbol_pound}${symbol_pound}${symbol_pound} in an expression, or when the expression evaluation fails
struts.el.throwExceptionOnFailure=false

${symbol_pound}${symbol_pound}${symbol_pound} Logs as Warnings properties that are not found (very verbose)
struts.ognl.logMissingProperties=false

${symbol_pound}${symbol_pound}${symbol_pound} Caches parsed OGNL expressions, but can lead to memory leaks
${symbol_pound}${symbol_pound}${symbol_pound} if the application generates a lot of different expressions
struts.ognl.enableExpressionCache=true